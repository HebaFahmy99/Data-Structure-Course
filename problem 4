
#include <iostream>

using namespace std;
int MAXSIZE = 1000;
template <class T>
class Stack{
private:
    int capacity;
    T* arr = new T[MAXSIZE] ; ;
public:
    Stack()
    {
        capacity = 0 ;
    }
    Stack(T values , int initial_size)
    {
        capacity = initial_size ;
        for (int i=0 ; i<capacity ; i++)
        {
            arr[i] = values ;
        }
    }
    ~Stack()
    {
        delete [] arr ;
    }
    T & top()
    {
        if (capacity == 0)
            cout << "stack is empty\n" ;
       return arr[capacity] ;
    }
    void pop()
    {
        if (capacity == 0)
            cout << "stack is empty\n" ;
        else
            capacity -- ;
    }
    void push (T element)
    {
        capacity ++ ;
        arr[capacity] = element ;
    }
    int Size ()
    {
        return capacity ;
    }
    int isEmpty()
    {
        if(capacity ==0)
            return 1;
        else
            return 0;
    }
};

int pairedOrNot(char open , char close)
{
        return ( (open == '[' && close == ']') || (open == '(' && close == ')') || (open == '{' && close == '}'));
}

bool balancedOrNot (string expression)
{
    Stack<char>obj ;
    bool flag = false ;
    int length ;
    length = expression.length() ;
    for (int i=0 ;i<length ; i++)
    {
        if (!flag && expression[i] != '*')
        {
            if (expression[i] == '[' || expression[i] == '{' || expression[i] == '(' )
            {
                obj.push(expression[i]) ;
            }
            else if ((expression[i] == '/' && expression[i+1] == '*'))
            {
                obj.push(expression[i]) ;
                obj.push(expression[i+1]) ;
                i+= 2 ;
                flag = true ;
            }
            else if (expression[i] == ']' || expression[i] == '}' || expression[i] == ')' )
            {
                if (obj.isEmpty() || !pairedOrNot(obj.top() , expression[i]))
                    return false ;
                else
                    obj.pop() ;
            }
        }
        else if((i+1 != obj.Size()) && (expression[i]=='*') && (expression[i+1]=='/'))
        {
                if(!obj.isEmpty() && obj.top() == expression[i])
                {
                    obj.pop(); //delete /
                    obj.pop(); //delete *
                    i++;
                    flag = false;
                }
                else
                    return false;
        }
    }
    if (obj.isEmpty())
        return true ;
    else
        return false;
}


int main()
{

          // test case 1
	if (balancedOrNot("([{}])(){}[]{[]}"))
        cout << "Expression is balanced \n" ;
    else
        cout << "Expression is not balanced \n" ;

      // test case 2
      if (balancedOrNot("({)}"))
        cout << "Expression is balanced \n" ;
    else
        cout << "Expression is not balanced \n" ;
        // test case 3
        if (balancedOrNot("({/*)}]]]]]]}*/})"))
        cout << "Expression is balanced \n" ;
    else
        cout << "Expression is not balanced \n" ;
        // test case 4
        if (balancedOrNot("({/*[][[]]]]]})"))
        cout << "Expression is balanced \n" ;
    else
        cout << "Expression is not balanced \n" ;
        // test case 5
        if (balancedOrNot("[{/*******/}]"))
        cout << "Expression is balanced \n" ;
    else
        cout << "Expression is not balanced \n" ;
    return 0;
}
