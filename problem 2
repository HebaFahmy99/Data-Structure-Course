
#include<iostream>
#include <stdio.h>
#include <time.h>
using namespace std;

void swap(int* a, int* b)
{
    int t = *a;
    *a = *b;
    *b = t;
}
int partition(int arr[], int iBegin, int jEnd)
{
    int i = iBegin;
    int j = jEnd;
    int pivLoc = i;
    while (true)
    {
        while (arr[pivLoc] <= arr[j] && pivLoc != j)
        {
            j--;
        }
        if (pivLoc == j)
            break;
        else if (arr[pivLoc] > arr[j])
        {
            swap(arr[j], arr[pivLoc]);
            pivLoc = j;
        }

        while (arr[pivLoc] >= arr[i] && pivLoc != i)
        {
            i++;
        }
        if (pivLoc == i)
            break;
        else if (arr[pivLoc] < arr[i])
        {
            swap(arr[i], arr[pivLoc]);
            pivLoc = i;
        }
    }
    return pivLoc;
}
void quickSort(int arr[], int l, int h)
{

    if (l < h)
    {
        int piv = partition(arr, l, h);
        quickSort(arr, l, piv - 1);
        quickSort(arr, piv + 1, h);
    }

}
void selectionSort(int arr[], int n)
{
    int minIdx;
    for (int i = 0; i < n - 1; i++)
    {
        minIdx = i;

        for (int j = i + 1; j < n; j++)
            if (arr[j] > arr[minIdx])
                minIdx = j;
        swap(arr[minIdx], arr[i]);

    }
}
void printArray(int arr[], int size)
{
    cout << "[";
    for (int i = 0; i < size; i++)
    {
        cout << arr[i] << " ";
    }
    cout << "]";
}
class TestSorting
{
private:
    int* randomList;
public:
    int* GenerateRandomList(int min, int max, int size)
    {
        randomList = new int[size];
        srand(time(0));
        for (int i = 0; i < size; i++)
        {
            randomList[i] = rand() % (max + 1 - min) + min;
        }
        return randomList;
    }
    double RunOnce(string sorter, int* data, int size)
    {
        clock_t start, end;
        double totalTime;
        if (sorter == "quickSort")
        {
            start = clock();
            quickSort(data, 0, size - 1);
            end = clock();
            totalTime = ((double)(end - start)) / CLOCKS_PER_SEC;
            return totalTime;
        }
        else if (sorter == "selectionSort")
        {
            start = clock();
            selectionSort(data, size);
            end = clock();
            totalTime = ((double)(end - start)) / CLOCKS_PER_SEC;
            return totalTime;
        }
    }
    double RunAndAverage(string sorter, int min, int max, int size, int sets_num)
    {
        double totalAverageTime = 0.0;
        int* data;
        for (int i = 0; i < sets_num; i++)
        {
            data = GenerateRandomList(min, max, size);
            totalAverageTime += RunOnce(sorter, data, size);
        }
        return totalAverageTime / sets_num;
    }
    ~TestSorting()
    {
        delete randomList;
    }
};

int main()
{
    int* data;
    int Min, Max, Size, numSets;
    double time_taken;
    string sorter, checker;
    bool flag = true;
    cout << "Enter range of random list e.g., from 1 to 100000: ";
    cin >> Min >> Max;
    cout << "Enter size of array: ";
    cin >> Size;
    TestSorting t1;
    data = t1.GenerateRandomList(Min, Max, Size);
    cout << "Random List created.." << endl;
    printArray(data, Size);
    while (flag) {
        cout << "\nselect one of this sorter (quickSort,selectionSort) press q/s:";
        cin >> sorter;
        if (sorter == "quickSort" || sorter == "q" || sorter == "Q")
        {
            time_taken = t1.RunOnce("quickSort", data, Size);
            cout<<"List after quickSort:";
            printArray(data,Size);
            cout << "\nTime taken by quickSort is : " << time_taken ;
            cout << " sec " << endl;
            cout << "Enter number of sets to calculate average time: ";
            cin >> numSets;
            time_taken = t1.RunAndAverage("quickSort", Min, Max, Size, numSets);
            cout << "Average Time taken by quickSort for several sets of data is "<< time_taken;
            cout << " sec " << endl;
            cout << "Try again ? press y/n: ";
            cin >> checker;
            if (checker == "y" || checker == "Y")
                continue;
            else if (checker == "n" || checker == "N")
                flag = false;
            else
                cout << "Wrong option\n";
        }
        else if (sorter == "selectionSort" || sorter == "s" || sorter == "S")
        {
            time_taken = t1.RunOnce("selectionSort", data, Size);
            cout<<"List after selectionSort:";
            printArray(data,Size);
            cout << "\nTime taken by selectionSort is : " << time_taken;
            cout << " sec " << endl;
            cout << "Enter number of sets to calculate average time: ";
            cin >> numSets;
            time_taken = t1.RunAndAverage("selectionSort", Min, Max, Size, numSets);
            cout << "Average Time taken by selectionSort for several sets of data is : " << time_taken ;
            cout << " sec " << endl;
            cout << "Try again ? press y/n: ";
            cin >> checker;
            if (checker == "y" || checker == "Y")
                continue;
            else if (checker == "n" || checker == "N")
                flag = false;
            else
                cout << "Wrong option\n";
        }

    }

}
